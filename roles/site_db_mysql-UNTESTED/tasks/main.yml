---

# Set up MySQL installation but not project-specific DBs or users
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define mysql_packages.
  set_fact:
    mysql_packages: "{{ __mysql_packages | list }}"
  when: mysql_packages is not defined

- name: Define mysql_daemon.
  set_fact:
    mysql_daemon: "{{ __mysql_daemon }}"
  when: mysql_daemon is not defined

- name: Define mysql_slow_query_log_file.
  set_fact:
    mysql_slow_query_log_file: "{{ __mysql_slow_query_log_file }}"
  when: mysql_slow_query_log_file is not defined


# Setup/install tasks according to OS.
- include: "setup_{{ ansible_os_family }}.yml"


# CONFIGURE MYSQL
- name: Copy my.cnf global MySQL configuration.
  template:
    src: my.cnf.j2
    dest: "{{ mysql_config_file }}"
    owner: root
    group: root
    mode: 0644
    force: "{{ overwrite_global_mycnf }}"
  notify: restart mysql

- name: Create slow query log file (if configured).
  shell: "touch {{ mysql_slow_query_log_file }} creates={{ mysql_slow_query_log_file }}"
  when: mysql_slow_query_log_enabled

- name: Set ownership on slow query log file (if configured).
  file:
    path: "{{ mysql_slow_query_log_file }}"
    state: file
    owner: mysql
    group: mysql
    mode: 0644
  when: mysql_slow_query_log_enabled

- name: Ensure MySQL is started and enabled on boot.
  service: "name={{ mysql_daemon }} state=started enabled={{ mysql_enabled_on_startup }}"


# SECURE INSTALLATION
# May need to do these manually with mysql_secure_installation.
# If Provision halts on host list task, run mysql_secure_installation and change root pw to be blank.
# Re-run the provisioner.
# The pw will then be updated by the next task.

#- name: Setting MySQL Root Password
#  mysql_user: name=root password={{ mysql_root_password }} priv=*.*:ALL state=present

# If need-be, run the next two tasks on the FIRST provision; then comment them out.
# Otherwise they'll fail after pw changed.
# (uncomment them after user-my.cnf.j2 has been copied over.)
- name: Get list of hosts for the root user.
  command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = "root" ORDER BY (Host="localhost") ASC'
  register: mysql_root_hosts
  changed_when: false

# 'localhost' needs to be last for idempotency.
- name: Update MySQL root password for localhost root account.
  mysql_user:
    name: "root"
    host: "{{ item }}"
    password: "{{ mysql_root_password }}"
  with_items: mysql_root_hosts.stdout_lines

# Has to be after the root password assignment, for idempotency.
- name: Copy .my.cnf file with root password credentials.
  template:
    src: "user-my.cnf.j2"
    dest: "{{ mysql_user_home }}/.my.cnf"
    owner: root
    group: root
    mode: 0600

- name: Get list of hosts for the anonymous user.
  command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = ""'
  register: mysql_anonymous_hosts
  changed_when: false

- name: Remove anonymous MySQL users.
  mysql_user:
     name: ""
     host: "{{ item }}"
     state: absent
  with_items: mysql_anonymous_hosts.stdout_lines

- name: Remove MySQL test database.
  mysql_db: "name='test' state=absent"


# SET UP REPLICATION
- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE') }}"
    state: present
  when: >
    (mysql_replication_role == 'master')
    and mysql_replication_user
    and (mysql_replication_master != '')

- name: Check slave replication status.
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: >
    mysql_replication_role == 'slave'
    and (mysql_replication_master != '')

- name: Check master replication status.
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: >
    slave|failed
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')

- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  ignore_errors: True
  when: >
    slave|failed
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
    and mysql_replication_user

- name: Start replication.
  mysql_replication: mode=startslave
  when: >
    slave|failed
    and (mysql_replication_role == 'slave')
    and (mysql_replication_master != '')
