---

# HOSTNAME
#- name: Set hostname
#  action: shell hostnamectl set-hostname {{ hostname }}

# UPDATE APT
- name: Update APT package cache
  action: apt update_cache=yes

- name: Upgrade APT to the latest packages
  action: apt upgrade=safe

- name: Install unattended-upgrades
  action: apt pkg=unattended-upgrades state=present

- name: Adjust APT update intervals
  template: src=apt/10periodic dest=/etc/apt/apt.conf.d/10periodic

- name: Make sure unattended-upgrades only installs from security
  action: lineinfile dest=/etc/apt/apt.conf.d/50unattended-upgrades regexp="distro_codename\}\-updates" state=absent


# SECURITY
- name: Install fail2ban
  action: apt pkg=fail2ban state=installed

#- name: Disallow password authentication
#  action: lineinfile dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
#  notify: restart ssh

- name: Disallow root SSH access
  action: lineinfile dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
  notify: restart ssh

#- name: Delete /etc/sudoers.d/ files
#  action: shell rm -f /etc/sudoers.d/*

- name: Install packages
  action: apt pkg=ufw state=installed

- name: Setup ufw 22/tcp
  action: shell ufw allow 22/tcp

- name: Setup ufw 80/tcp
  action: shell ufw allow 80/tcp

- name: Setup ufw 443/tcp
  action: shell ufw allow 443/tcp

- name: Setup ufw 8000/tcp (for django)
  action: shell ufw allow 8000/tcp
  when: vagrant_mode

- name: Enable ufw
  action: shell echo 'y' | ufw enable

#- name: Delete root password
#  action: shell passwd -d root

#- name: Disable unnecessary services
#  command: "/usr/sbin/update-inetd --disable {{ item }}"
#  with_items:
#    - telnet
#    - rsh
#    - rlogin
#    - rcp


# INSTALL PACKAGES
- name: Ensure bash, OpenSSl, and libssl are the latest versions
  apt: name={{ item }} state=latest
  with_items:
    - bash
    - openssl
    - libssl-dev
    - libssl-doc
  tags: packages

- name: Install dependency packages
  action: apt pkg={{ item }} state=installed
  with_items:
    - vim
    - git


# CREATE PROJECT USERS
- name: Create the project user
  user: name={{ proj_user }} state=present

- name: Create the project group
  group: name={{ proj_group }} system=yes state=present

- name: Add the project user to the project group
  user: name={{ proj_user }} group={{ proj_group }} state=present
