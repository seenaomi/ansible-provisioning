# Limit # of simultaneous connections per session
# Directive describes the zone, in which the session states are stored i.e. store in slimits.
# 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session
limit_zone slimits $binary_remote_addr 5m;

# Control maximum number of simultaneous connections for one session i.e.
# restricts the amount of connections from a single ip address
limit_conn slimits 5;


upstream wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ venv_dir }}/run/gunicorn.sock fail_timeout=0;
}


server {
    listen      80;
    server_name {{ nginx_server_name }} www.{{ nginx_server_name }};

    client_max_body_size 4M;

    rewrite     ^ https://$server_name$request_uri? permanent;
}

server {
    listen              443;
    server_name         {{ nginx_server_name }} www.{{ nginx_server_name }};
    ssl on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    ssl_certificate     {{ ssl_dest_dir }}/{{ ssl_cert }};
    ssl_certificate_key {{ ssl_dest_dir }}/{{ ssl_cert_key }};
    keepalive_timeout 70;

    client_max_body_size 4M;

    # Only requests to our Host are allowed (e.g. www.sghat.com)
    if ($host !~ ^({{ nginx_server_name }}|www.{{ nginx_server_name }})$ ) {
        return 444;
    }

    # Only allow these request methods ##
    if ($request_method !~ ^(GET|HEAD|POST|PUT)$ ) {
        return 444;
    }

    # Block download agents and robots
    if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
        return 403;
    }
    if ($http_user_agent ~* msnbot|scrapbot) {
        return 403;
    }
    # Deny spammy referrers
    if ( $http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen) )
    {
        # return 404;
        return 403;
    }

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};

    location /static/ {
        alias   {{ nginx_static_dir }};

        # Stop deep linking/hotlinking images
        valid_referers none blocked www.{{ nginx_server_name }} {{ nginx_server_name }};
        if ($invalid_referer) {
            return   403;
        }
    }

    location /media/ {
        alias   {{ nginx_media_dir }};

        # Stop deep linking/hotlinking images
        valid_referers none blocked www.{{ nginx_server_name }} {{ nginx_server_name }};
        if ($invalid_referer) {
            return   403;
        }
    }

    location / {
        if (-f {{ venv_dir }}/maintenance.html) {
            return 503;
        }

        client_max_body_size 4M;

        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://wsgi_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 504 /500.html;
    location = /500.html {
        root {{ src_dir }}/templates/;
    }

    error_page 503 /maintenance.html;
    location = /maintenance.html {
        root {{ src_dir }}/templates/;
    }
}