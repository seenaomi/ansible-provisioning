---

- name: Install Nginx
  apt: name=nginx update_cache={{ update_apt_cache }} state=installed
  tags: packages

#- name: Copy the SSL certificate to the remote server
#  copy: content="{{ ssl_crt }}" dest={{ ssl_dest_dir }}/{{ project_name }}.crt
#  notify: restart nginx

#- name: Copy the SSL private key to the remote server
#  copy: content="{{ ssl_key }}" dest={{ ssl_dest_dir }}/{{ project_name }}.key
#  notify: restart nginx

# nginx should have read access to the cert and key
- name: Make nginx owner of cert and key files and restrict access
  file:
    path: "{{ item }}"
    owner: "{{ webserver_user }}"
    mode: u=r,g=r,o=
  when: vagrant_mode == false
  with_items:
    - "{{ ssl_cert_path }}"
    - "{{ ssl_cert_key_path }}"

# Template is in project-specific provision/templates dir
- name: Create the Nginx HTTPS configuration file
  template: src=../../../provision_proj/templates/nginx_site_config_https.j2
            dest=/etc/nginx/sites-available/{{ project_name }}
            backup=yes
  when: vagrant_mode == false
  notify: reload nginx

- name: Create the Nginx HTTP configuration file
  template: src=../../../provision_proj/templates/nginx_site_config_http.j2
            dest=/etc/nginx/sites-available/{{ project_name }}
            backup=yes
  when: vagrant_mode == true
  notify: reload nginx

- name: Ensure that the default site is disabled
  command: rm /etc/nginx/sites-enabled/default
           removes=/etc/nginx/sites-enabled/default
  notify: reload nginx

- name: Ensure that the application site is enabled
  command: ln -s /etc/nginx/sites-available/{{ project_name }}
           /etc/nginx/sites-enabled/{{ project_name }}
           creates=/etc/nginx/sites-enabled/{{ project_name }}
  notify: reload nginx

- name: Ensure Nginx service is started
  service: name=nginx state=started enabled=yes
